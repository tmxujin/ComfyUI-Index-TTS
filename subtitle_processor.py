"""
ComfyUI Enhanced Subtitle Batch Iterator
Â¢ûÂº∫ÁâàÂ≠óÂπïÊâπÂ§ÑÁêÜËø≠‰ª£Âô® - ÊîØÊåÅSRTÂíåÁªìÊûÑÂåñÂ≠óÂπï
"""

import json
import re
from typing import Dict, List, Tuple, Optional


class EnhancedSubtitleBatchIterator:
    """
    Â¢ûÂº∫ÁâàÂ≠óÂπïÊâπÂ§ÑÁêÜËø≠‰ª£Âô®
    ÂäüËÉΩ:
    1. ÊîØÊåÅSRTÊ†ºÂºèÂ≠óÂπï(Ëá™Âä®Ëß£Êûê‰∏∫ËßíËâ≤0)
    2. ÊîØÊåÅÁªìÊûÑÂåñJSONÂ≠óÂπï(ÊîØÊåÅÂ§öËßíËâ≤)
    3. ÊóÅÁôΩ‰∏çÂøΩÁï•,Áªü‰∏ÄÊ†áÊ≥®‰∏∫ËßíËâ≤0
    4. ËæìÂá∫Ê≠åËØçÊñáÊú¨‰æõÂêéÊúüÂ≠óÂπï‰ΩøÁî®
    5. Êï¥ÂêàËß£ÊûêÂíåËø≠‰ª£ÂäüËÉΩ‰∫é‰∏Ä‰Ωì
    """
    
    # Á±ªÁ∫ßÂà´Áä∂ÊÄÅÂ≠òÂÇ®
    _state = {}
    
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "subtitle_text": ("STRING", {
                    "default": "",
                    "multiline": True,
                    "forceInput": False
                }),
                "subtitle_type": (["auto", "srt", "json"], {
                    "default": "auto"
                }),
                "reset_iterator": ("BOOLEAN", {
                    "default": False
                })
            },
            "optional": {
                "narrator_as_character_0": ("BOOLEAN", {
                    "default": True
                })
            }
        }
    
    RETURN_TYPES = ("STRING", "INT", "FLOAT", "FLOAT", "STRING", "INT", "INT", "BOOLEAN", "STRING")
    RETURN_NAMES = ("character_id", "mask_index", "start_time", "end_time", 
                    "subtitle_text", "current_index", "total_count", "is_finished", "debug_info")
    FUNCTION = "execute"
    CATEGORY = "MultiCharacter/Batch"
    
    def execute(self, subtitle_text: str, subtitle_type: str = "auto", 
                reset_iterator: bool = False, narrator_as_character_0: bool = True):
        """ÊâßË°åÂ≠óÂπïËß£ÊûêÂíåËø≠‰ª£"""
        
        key = id(self)
        
        # ÈáçÁΩÆÊàñÈ¶ñÊ¨°ËøêË°åÊó∂Ëß£ÊûêÂ≠óÂπï
        if reset_iterator or key not in self._state:
            parsed_data = self._parse_subtitle(subtitle_text, subtitle_type, narrator_as_character_0)
            self._state[key] = {
                "data": parsed_data,
                "index": 0,
                "total": len(parsed_data)
            }
            print(f"‚úÖ Â≠óÂπïËß£ÊûêÂÆåÊàê: {len(parsed_data)} ‰∏™ÁâáÊÆµ")
        
        state = self._state[key]
        idx = state["index"]
        total = state["total"]
        
        # Ê£ÄÊü•ÊòØÂê¶ÂÆåÊàê
        if idx >= total:
            debug = f"‚úÖ ÊâπÂ§ÑÁêÜÂÆåÊàê: {total}/{total}"
            print(debug)
            return ("0", 0, 0.0, 0.0, "", idx, total, True, debug)
        
        # Ëé∑ÂèñÂΩìÂâçÁâáÊÆµ
        seg = state["data"][idx]
        state["index"] += 1
        
        is_finished = (state["index"] >= total)
        
        debug = f"üé¨ [{idx+1}/{total}] ËßíËâ≤{seg['character_id']} | {seg['start_time']:.2f}s-{seg['end_time']:.2f}s | {seg['subtitle'][:30]}..."
        print(debug)
        
        return (
            seg["character_id"],
            seg["mask_index"],
            seg["start_time"],
            seg["end_time"],
            seg["subtitle"],
            idx + 1,  # current_index (1-based)
            total,
            is_finished,
            debug
        )
    
    def _parse_subtitle(self, text: str, subtitle_type: str, narrator_as_char0: bool) -> List[Dict]:
        """Ëß£ÊûêÂ≠óÂπïÊñáÊú¨"""
        text = text.strip()
        
        # Ëá™Âä®Ê£ÄÊµãÁ±ªÂûã
        if subtitle_type == "auto":
            if text.startswith('[') or text.startswith('{'):
                subtitle_type = "json"
            else:
                subtitle_type = "srt"
        
        # Ê†πÊçÆÁ±ªÂûãËß£Êûê
        if subtitle_type == "json":
            return self._parse_json_subtitle(text, narrator_as_char0)
        else:
            return self._parse_srt_subtitle(text)
    
    def _parse_json_subtitle(self, text: str, narrator_as_char0: bool) -> List[Dict]:
        """Ëß£ÊûêJSONÁªìÊûÑÂåñÂ≠óÂπï"""
        try:
            data = json.loads(text)
        except json.JSONDecodeError as e:
            print(f"‚ùå JSONËß£ÊûêÂ§±Ë¥•: {e}")
            return []
        
        results = []
        char_to_mask = {}  # ËßíËâ≤IDÂà∞maskÁ¥¢ÂºïÁöÑÊò†Â∞Ñ
        next_mask = 1
        
        # Â§ÑÁêÜJSONÊï∞ÊçÆÔºåÊîØÊåÅ‰∏§ÁßçÊ†ºÂºè
        # Ê†ºÂºè1: Áõ¥Êé•ÊòØÊï∞ÁªÑ
        if isinstance(data, list):
            items = data
        # Ê†ºÂºè2: ÂåÖÂê´segmentsÂ≠óÊÆµÁöÑÂØπË±°
        elif isinstance(data, dict) and "segments" in data:
            items = data["segments"]
        else:
            print(f"‚ùå JSONÊ†ºÂºè‰∏çÊîØÊåÅ: ÊúüÊúõÊï∞ÁªÑÊàñÂåÖÂê´segmentsÂ≠óÊÆµÁöÑÂØπË±°")
            return []
        
        for item in items:
            char_id = item.get("id", item.get("character_id", "Character1"))
            
            # Â§ÑÁêÜÊóÅÁôΩ
            if narrator_as_char0 and (char_id == "Narrator" or char_id == "ÊóÅÁôΩ"):
                char_id = "0"
                mask_index = 0
            else:
                # ‰∏∫ÈùûÊóÅÁôΩËßíËâ≤ÂàÜÈÖçmaskÁ¥¢Âºï
                if char_id not in char_to_mask:
                    char_to_mask[char_id] = next_mask
                    next_mask += 1
                mask_index = char_to_mask[char_id]
            
            # ÊîØÊåÅÂ§öÁßçÊó∂Èó¥Â≠óÊÆµÂêçÁß∞
            start_time_str = item.get("start", item.get("start_time", "0:00.000"))
            end_time_str = item.get("end", item.get("end_time", "0:00.000"))
            
            start = self._parse_time(start_time_str)
            end = self._parse_time(end_time_str)
            
            # ÊîØÊåÅÂ§öÁßçÂ≠óÂπïÂ≠óÊÆµÂêçÁß∞
            subtitle_text = item.get("Â≠óÂπï", item.get("text", item.get("subtitle", "")))
            
            results.append({
                "character_id": char_id,
                "mask_index": mask_index,
                "start_time": start,
                "end_time": end,
                "subtitle": subtitle_text
            })
        
        return results
    
    def _parse_srt_subtitle(self, text: str) -> List[Dict]:
        """Ëß£ÊûêSRTÂ≠óÂπïÊñá‰ª∂"""
        results = []
        blocks = text.strip().split('\n\n')
        
        for block in blocks:
            lines = block.strip().split('\n')
            if len(lines) < 3:
                continue
            
            # Ëß£ÊûêÊó∂Èó¥ËΩ¥ "00:00:13,952 --> 00:00:21,845"
            time_match = re.search(r'(\d{2}):(\d{2}):(\d{2})[,\.](\d{3})\s*-->\s*(\d{2}):(\d{2}):(\d{2})[,\.](\d{3})', lines[1])
            if not time_match:
                continue
            
            sh, sm, ss, sms = map(int, time_match.groups()[:4])
            eh, em, es, ems = map(int, time_match.groups()[4:])
            
            start_time = sh * 3600 + sm * 60 + ss + sms / 1000.0
            end_time = eh * 3600 + em * 60 + es + ems / 1000.0
            
            # Â≠óÂπïÊñáÊú¨(ÂèØËÉΩÂ§öË°å)
            subtitle = '\n'.join(lines[2:])
            
            results.append({
                "character_id": "0",  # SRTÈªòËÆ§ËßíËâ≤0
                "mask_index": 0,
                "start_time": start_time,
                "end_time": end_time,
                "subtitle": subtitle
            })
        
        return results
    
    def _parse_time(self, time_str: str) -> float:
        """Ëß£ÊûêÊó∂Èó¥Â≠óÁ¨¶‰∏≤ M:SS.mmm -> ÁßíÊï∞"""
        match = re.match(r'(\d+):(\d+)\.(\d+)', time_str.strip())
        if match:
            m, s, ms = int(match.group(1)), int(match.group(2)), int(match.group(3))
            return m * 60 + s + ms / 1000.0
        return 0.0


# ============================================================
# ËæÖÂä©ËäÇÁÇπ: Â≠óÂπïÊñáÊú¨Ê†ºÂºèÂåñÂô®
# ============================================================

class SubtitleTextFormatter:
    """
    Â∞ÜÂ≠óÂπïÊñáÊú¨Ê†ºÂºèÂåñ‰∏∫ÂèØÁî®‰∫éËßÜÈ¢ëÂè†Âä†ÁöÑÊ†ºÂºè
    ÊîØÊåÅÊó∂Èó¥ËΩ¥ÂíåÁ∫ØÊñáÊú¨ËæìÂá∫
    """
    
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "subtitle_text": ("STRING", {
                    "forceInput": True
                }),
                "start_time": ("FLOAT", {
                    "forceInput": True
                }),
                "end_time": ("FLOAT", {
                    "forceInput": True
                }),
                "include_timeline": ("BOOLEAN", {
                    "default": True
                })
            }
        }
    
    RETURN_TYPES = ("STRING",)
    RETURN_NAMES = ("formatted_text",)
    FUNCTION = "format"
    CATEGORY = "MultiCharacter/Batch"
    
    def format(self, subtitle_text: str, start_time: float, end_time: float, 
               include_timeline: bool = True) -> Tuple[str]:
        """Ê†ºÂºèÂåñÂ≠óÂπïÊñáÊú¨"""
        if include_timeline:
            start_str = self._format_time(start_time)
            end_str = self._format_time(end_time)
            formatted = f"[{start_str} - {end_str}]\n{subtitle_text}"
        else:
            formatted = subtitle_text
        
        return (formatted,)
    
    def _format_time(self, seconds: float) -> str:
        """ÁßíÊï∞ËΩ¨Êó∂Èó¥Â≠óÁ¨¶‰∏≤ HH:MM:SS.mmm"""
        h = int(seconds // 3600)
        m = int((seconds % 3600) // 60)
        s = int(seconds % 60)
        ms = int((seconds % 1) * 1000)
        return f"{h:02d}:{m:02d}:{s:02d}.{ms:03d}"


# ============================================================
# ComfyUIËäÇÁÇπÊ≥®ÂÜå
# ============================================================

NODE_CLASS_MAPPINGS = {
    "EnhancedSubtitleBatchIterator": EnhancedSubtitleBatchIterator,
    "SubtitleTextFormatter": SubtitleTextFormatter
}

NODE_DISPLAY_NAME_MAPPINGS = {
    "EnhancedSubtitleBatchIterator": "Enhanced Subtitle Batch Iterator",
    "SubtitleTextFormatter": "Subtitle Text Formatter"
}